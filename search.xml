<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ResponseBody注解响应json数据</title>
    <url>/2021/01/07/ResponseBody%E6%B3%A8%E8%A7%A3%E5%93%8D%E5%BA%94json%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="springMVC响应json数据"><a href="#springMVC响应json数据" class="headerlink" title="springMVC响应json数据"></a>springMVC响应json数据</h1><a id="more"></a>

<h2 id="前端发送一段json数据"><a href="#前端发送一段json数据" class="headerlink" title="前端发送一段json数据"></a>前端发送一段json数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&quot;bt1&quot;&gt;发送ajax请求&lt;&#x2F;button&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(&quot;#bt1&quot;).click(function () &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:&quot;post&quot;,</span><br><span class="line">                url:&quot;user&#x2F;testAjax&quot;,</span><br><span class="line">                data:&#39;&#123;&quot;username&quot;:&quot;hello&quot;,&quot;age&quot;:18&#125;&#39;,</span><br><span class="line">                contentType:&quot;application&#x2F;json;charset&#x3D;UTF-8&quot;,</span><br><span class="line">                datatype:&quot;json&quot;,</span><br><span class="line">                success:function (data) &#123;</span><br><span class="line">                    alert(data.username);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="在springmvc-xml中配置不拦截js资源"><a href="#在springmvc-xml中配置不拦截js资源" class="headerlink" title="在springmvc.xml中配置不拦截js资源"></a>在springmvc.xml中配置不拦截js资源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--告诉前端控制器，哪些资源不拦截--&gt;</span><br><span class="line">&lt;mvc:resources mapping&#x3D;&quot;&#x2F;js&#x2F;**&quot; location&#x3D;&quot;&#x2F;js&#x2F;&quot;&gt;&lt;&#x2F;mvc:resources&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Controller层接收json数据并响应"><a href="#Controller层接收json数据并响应" class="headerlink" title="Controller层接收json数据并响应"></a>Controller层接收json数据并响应</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;testAjax&quot;)</span><br><span class="line">public @ResponseBody User testAjax(@RequestBody User user) &#123;</span><br><span class="line">    user.setUsername(&quot;jasd&quot;);</span><br><span class="line">    user.setAge(20);</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务器接收请求，通过@RequestBody注解获取请求体内容，框架自动将数据封装到对应的User对象中（要求属性名和user实体类的属性名一致）<br>后通过@ReponseBody以json格式响应前端页面，需要导入一些jar包</p>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/image/ResponseBody%E6%B3%A8%E8%A7%A3%E5%93%8D%E5%BA%94json%E6%95%B0%E6%8D%AE/1.png"></p>
<h2 id="相关依赖坐标"><a href="#相关依赖坐标" class="headerlink" title="相关依赖坐标"></a>相关依赖坐标</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--jackson jar包--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jackson-annotations&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>SSM整合</title>
    <url>/2021/03/24/SSM%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><a id="more"></a>

<h2 id="1-整合springmvc和spring"><a href="#1-整合springmvc和spring" class="headerlink" title="1.整合springmvc和spring"></a>1.整合springmvc和spring</h2><h3 id="1-1在web-xml配置spring的监听器-，来读取bean-xml"><a href="#1-1在web-xml配置spring的监听器-，来读取bean-xml" class="headerlink" title="1.1在web.xml配置spring的监听器 ，来读取bean.xml"></a>1.1在web.xml配置spring的监听器 ，来读取bean.xml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置spring的监听器 默认只加载WEB-INF下的bean.xml--&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">  &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">&lt;&#x2F;listener&gt;</span><br><span class="line">&lt;!-- 设置bean.xml的路径--&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">  &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">  &lt;param-value&gt;classpath:bean.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;context-param&gt;</span><br></pre></td></tr></table></figure>
<p>默认只加载WEB-INF下的bean.xml，可以用context-param标签指定类路径下也就是resources下的配置文件</p>
<h3 id="2-2在springmvc-xml中配置注解扫描"><a href="#2-2在springmvc-xml中配置注解扫描" class="headerlink" title="2.2在springmvc.xml中配置注解扫描"></a>2.2在springmvc.xml中配置注解扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理--&gt;</span><br><span class="line">&lt;context:component-scan base-package&#x3D;&quot;com&quot;&gt;</span><br><span class="line">    &lt;!-- 配置只扫描controller注解--&gt;</span><br><span class="line">    &lt;context:include-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Controller&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;context:component-scan&gt;</span><br></pre></td></tr></table></figure>
<p>使用context:include-filter标签指定只扫描controller注解</p>
<h3 id="2-3在bean-xml中配置注解扫描"><a href="#2-3在bean-xml中配置注解扫描" class="headerlink" title="2.3在bean.xml中配置注解扫描"></a>2.3在bean.xml中配置注解扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开启注解扫描，只扫描Controller注解--&gt;</span><br><span class="line">&lt;context:component-scan base-package&#x3D;&quot;com&quot;&gt;</span><br><span class="line">    &lt;!-- 不扫描哪个注解--&gt;</span><br><span class="line">    &lt;context:exclude-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Controller&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;context:component-scan&gt;</span><br></pre></td></tr></table></figure>
<p>使用context:exclude-filter标签指定不扫描controller注解</p>
<h3 id="2-4整合完毕"><a href="#2-4整合完毕" class="headerlink" title="2.4整合完毕"></a>2.4整合完毕</h3><h2 id="2-整合mybatis和spring"><a href="#2-整合mybatis和spring" class="headerlink" title="2.整合mybatis和spring"></a>2.整合mybatis和spring</h2><h3 id="2-1配置数据源"><a href="#2-1配置数据源" class="headerlink" title="2.1配置数据源"></a>2.1配置数据源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 数据源--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db4?serverTimezone&#x3D;GMT&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;root&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;xing5440889&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-2配置sqlSession工厂"><a href="#2-2配置sqlSession工厂" class="headerlink" title="2.2配置sqlSession工厂"></a>2.2配置sqlSession工厂</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- sqlSessionFactory工厂--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;sqlSession&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-3配置扫描映射"><a href="#2-3配置扫描映射" class="headerlink" title="2.3配置扫描映射"></a>2.3配置扫描映射</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!-- 扫描映射包--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;mapper&quot; class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;com.dao&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-4整合完毕-1"><a href="#2-4整合完毕-1" class="headerlink" title="2.4整合完毕"></a>2.4整合完毕</h3><h2 id="测试整合"><a href="#测试整合" class="headerlink" title="测试整合"></a>测试整合</h2><h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h3><p><img src="/image/SSM%E6%95%B4%E5%90%88/1.png"></p>
<p>AccountController类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.controller;</span><br><span class="line"></span><br><span class="line">import com.bean.Account;</span><br><span class="line">import com.service.impl.AccountServiceImpl;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;account&quot;)</span><br><span class="line">public class AccountController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    AccountServiceImpl accountService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAll&quot;)</span><br><span class="line">    public String findAll()&#123;</span><br><span class="line">        List&lt;Account&gt; accounts &#x3D; accountService.findAll();</span><br><span class="line">        for (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;saveAccount&quot;)</span><br><span class="line">    public String saveAccount(Account account)&#123;</span><br><span class="line">        accountService.saveAccount(account);</span><br><span class="line"></span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AccountServiceImpl实现类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.service.impl;</span><br><span class="line"></span><br><span class="line">import com.bean.Account;</span><br><span class="line">import com.dao.IAccountDao;</span><br><span class="line">import com.service.IAccountService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service(&quot;accountServcie&quot;)</span><br><span class="line">public class AccountServiceImpl implements IAccountService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Account&gt; findAll() &#123;</span><br><span class="line">        List&lt;Account&gt; accounts &#x3D; accountDao.findAll();</span><br><span class="line">        return accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void saveAccount(Account account) &#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>IAccountDao接口及IAccountDao.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dao;</span><br><span class="line"></span><br><span class="line">import com.bean.Account;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface IAccountDao &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 查询所有账户信息</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    List&lt;Account&gt; findAll();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 保存账户</span><br><span class="line">     * @param account</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void saveAccount(Account account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.dao.IAccountDao&quot;&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;findAll&quot; resultType&#x3D;&quot;com.bean.Account&quot;&gt;</span><br><span class="line">        select * from account;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;insert id&#x3D;&quot;saveAccount&quot; parameterType&#x3D;&quot;com.bean.Account&quot;&gt;</span><br><span class="line">        insert into account(username,money) values(#&#123;username&#125;,#&#123;money&#125;);</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-xml配置"><a href="#2-xml配置" class="headerlink" title="2.xml配置"></a>2.xml配置</h3><p>web.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"> &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD Web Application 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line"> &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-app_2_3.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;&#x2F;display-name&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!-- 解决中文乱码--&gt;</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">      &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">  &lt;&#x2F;filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;**&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;filter-mapping&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!-- 配置前端控制器--&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;dispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">    &lt;!-- 读取springmvc.xml配置文件--&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">      &lt;param-value&gt;classpath:springmvc.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;!-- 服务器启动时加载配置文件--&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">  &lt;&#x2F;servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;dispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;!-- 拦截所有请求--&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 配置spring的监听器 默认只加载WEB-INF下的bean.xml--&gt;</span><br><span class="line">  &lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">  &lt;&#x2F;listener&gt;</span><br><span class="line">  &lt;!-- 设置bean.xml的路径--&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath:bean.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">  &lt;&#x2F;context-param&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure>
<p>springmvc.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">        &quot;&gt;</span><br><span class="line">    &lt;!-- 注解扫描--&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com&quot;&gt;</span><br><span class="line">        &lt;!-- 配置只扫描controller注解--&gt;</span><br><span class="line">        &lt;context:include-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Controller&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置视图解析器--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;internalResourceViewResolver&quot; class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 配置跳转文件路径--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;pages&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 配置跳转文件后缀--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置过滤静态文件--&gt;</span><br><span class="line">    &lt;mvc:resources mapping&#x3D;&quot;&#x2F;css&#x2F;**&quot; location&#x3D;&quot;&#x2F;css&#x2F;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启注解支持--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<p>bean.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd&quot;&gt;</span><br><span class="line">    &lt;!-- 开启扫描--&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com&quot;&gt;</span><br><span class="line">        &lt;!-- 不扫描哪个注解--&gt;</span><br><span class="line">        &lt;context:exclude-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Controller&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 整合mybatis--&gt;</span><br><span class="line">    &lt;!-- 数据源--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db4?serverTimezone&#x3D;GMT&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;root&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;xing5440889&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- sqlSessionFactory工厂--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSession&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 扫描映射包--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;mapper&quot; class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;com.dao&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置声明式事务管理--&gt;</span><br><span class="line">    &lt;!-- 配置事务管理器--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置事务通知--&gt;</span><br><span class="line">    &lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;find*&quot; propagation&#x3D;&quot;SUPPORTS&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;*&quot; propagation&#x3D;&quot;REQUIRED&quot; read-only&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;tx:attributes&gt;</span><br><span class="line">    &lt;&#x2F;tx:advice&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置aop--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut&#x3D;&quot;execution(* com.service.impl.*.*(..))&quot;&gt;&lt;&#x2F;aop:advisor&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><h3 id="测试findAll方法"><a href="#测试findAll方法" class="headerlink" title="测试findAll方法"></a>测试findAll方法</h3><p><img src="/image/SSM%E6%95%B4%E5%90%88/2.png"></p>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/image/SSM%E6%95%B4%E5%90%88/3.png"></p>
<h3 id="测试saveAccount方法"><a href="#测试saveAccount方法" class="headerlink" title="测试saveAccount方法"></a>测试saveAccount方法</h3><p><img src="/image/SSM%E6%95%B4%E5%90%88/4.png"></p>
<h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/image/SSM%E6%95%B4%E5%90%88/5.png"></p>
<h2 id="所需jar包坐标"><a href="#所需jar包坐标" class="headerlink" title="所需jar包坐标"></a>所需jar包坐标</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">  &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">  &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">  &lt;!-- 版本锁定--&gt;</span><br><span class="line">  &lt;spring.verson&gt;5.0.2.RELEASE&lt;&#x2F;spring.verson&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;jstl&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!-- springMVc--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.verson&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.verson&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--spring-jdbc和事务--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.verson&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.verson&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--spring-aop依赖jar--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.2&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--spring核心容器--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.verson&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--日志--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.7&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--mysql--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.23&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--mybatis--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.2&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--mybatis和spring整合包--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--jackson--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.8&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.8&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-annotations&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.8&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--C3P0连接池--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.mchange&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;c3p0&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.5.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>springAOP实现转账案例</title>
    <url>/2020/12/30/springAOP%E5%AE%9E%E7%8E%B0%E8%BD%AC%E8%B4%A6%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h4 id="最近刚学完spring的AOP之后写了一个转账的案例，遇到了一些问题，写个博客总结一下"><a href="#最近刚学完spring的AOP之后写了一个转账的案例，遇到了一些问题，写个博客总结一下" class="headerlink" title="最近刚学完spring的AOP之后写了一个转账的案例，遇到了一些问题，写个博客总结一下"></a>最近刚学完spring的AOP之后写了一个转账的案例，遇到了一些问题，写个博客总结一下</h4><a id="more"></a>

<h1 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1><h2 id="首先创建AccountDao接口及相应的方法"><a href="#首先创建AccountDao接口及相应的方法" class="headerlink" title="首先创建AccountDao接口及相应的方法"></a>首先创建AccountDao接口及相应的方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface AccountDao &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 查询所有</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public List&lt;Account&gt; findAll();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 根据用户名查询</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Account findByName(String username);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 更新用户</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void updateAccount(Account account);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 保存用户</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void saveAccount(Account account);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除用户</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void deleteById(int id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写其实现类"><a href="#编写其实现类" class="headerlink" title="编写其实现类"></a>编写其实现类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Repository(&quot;accountDao&quot;)</span><br><span class="line">public class AccountDao_impl implements AccountDao &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Account&gt; findAll() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;Account&gt; accounts &#x3D; runner.query(connectionUtils.getThreadConnection(),&quot;select * from account&quot;, new 						BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">            return accounts;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Account findByName(String username) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Account account &#x3D; runner.query(connectionUtils.getThreadConnection(),&quot;select * from account where username &#x3D; ?&quot;, new 			 BeanHandler&lt;Account&gt;(Account.class), username);</span><br><span class="line">            return account;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void updateAccount(Account account) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            runner.update(connectionUtils.getThreadConnection(),&quot;update account set username &#x3D; ?,money &#x3D; ? where id &#x3D; 						?&quot;,account.getUsername(),account.getMoney(),account.getId());</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void saveAccount(Account account) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            runner.update(connectionUtils.getThreadConnection(),&quot;insert into account(username,money) 										values(?,?)&quot;,account.getUsername(),account.getMoney());</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void deleteById(int id) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            runner.update(connectionUtils.getThreadConnection(),&quot;delete from account where id &#x3D; ?&quot;,id);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4>]]></content>
  </entry>
  <entry>
    <title>springMVC拦截器</title>
    <url>/2021/03/23/springMVC%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h1 id="springMVC拦截器"><a href="#springMVC拦截器" class="headerlink" title="springMVC拦截器"></a>springMVC拦截器</h1><a id="more"></a>

<h2 id="1-编写拦截器类，实现HandlerInterceptor接口"><a href="#1-编写拦截器类，实现HandlerInterceptor接口" class="headerlink" title="1.编写拦截器类，实现HandlerInterceptor接口"></a>1.编写拦截器类，实现HandlerInterceptor接口</h2><p><img src="/image/springMVC%E6%8B%A6%E6%88%AA%E5%99%A8/1.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.interceptor;</span><br><span class="line"></span><br><span class="line">import org.aopalliance.intercept.Interceptor;</span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 自定义拦截器</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyInterceptor1 implements HandlerInterceptor &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 预处理，在controller方法执行前执行</span><br><span class="line">     * return true 放行 ，执行下一个拦截器，如果没有，执行controller中的方法</span><br><span class="line">     * return false 不放行</span><br><span class="line">     * @param request</span><br><span class="line">     * @param response</span><br><span class="line">     * @param handler</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;MyInterceptor1执行了...前&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 后处理，在controller方法执行后执行，在success.jsp页面执行前执行</span><br><span class="line">     * @param request</span><br><span class="line">     * @param response</span><br><span class="line">     * @param handler</span><br><span class="line">     * @param modelAndView</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;MyInterceptor1执行了...后&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在success.jsp页面执行后执行</span><br><span class="line">     * @param request</span><br><span class="line">     * @param response</span><br><span class="line">     * @param handler</span><br><span class="line">     * @param ex</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;MyInterceptor1执行了...最后&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-1该接口有三个实现类"><a href="#1-1该接口有三个实现类" class="headerlink" title="1.1该接口有三个实现类"></a>1.1该接口有三个实现类</h3><h4 id="1-public-boolean-preHandle（-）"><a href="#1-public-boolean-preHandle（-）" class="headerlink" title="1.public boolean preHandle（..）{..}"></a>1.public boolean preHandle（..）{..}</h4><p> 预处理，在controller方法执行前执行<br> return true 放行 ，执行下一个拦截器，如果没有，执行controller中的方法<br> return false 不放行    后可请求转发页面</p>
<h4 id="2-public-void-postHandle（-）"><a href="#2-public-void-postHandle（-）" class="headerlink" title="2.public void postHandle（..）{..}"></a>2.public void postHandle（..）{..}</h4><p> 后处理，在controller方法执行后执行，在success.jsp页面执行前执行</p>
<p>请求转发页面后不会跳转到success.jsp,而是跳转到指定的页面</p>
<h4 id="3-public-void-afterCompletion（-）"><a href="#3-public-void-afterCompletion（-）" class="headerlink" title="3.public void afterCompletion（..）{..}"></a>3.public void afterCompletion（..）{..}</h4><p>在success.jsp页面执行后执行</p>
<h2 id="2-配置拦截器"><a href="#2-配置拦截器" class="headerlink" title="2.配置拦截器"></a>2.配置拦截器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置拦截器组件--&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!-- 配置要拦截的方法--&gt;</span><br><span class="line">        &lt;mvc:mapping path&#x3D;&quot;&#x2F;test&#x2F;*&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 配置不拦截的方法</span><br><span class="line">        &lt;mvc:exclude-mapping path&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;!-- 配置拦截器对象--&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;com.interceptor.MyInterceptor1&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;&#x2F;mvc:interceptor&gt;</span><br><span class="line">&lt;&#x2F;mvc:interceptors&gt;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>测试类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;&#x2F;test&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;testInterceptor&quot;)</span><br><span class="line">    public String testInterceptor()&#123;</span><br><span class="line">        System.out.println(&quot;testInterceptor执行了&quot;);</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="/image/springMVC%E6%8B%A6%E6%88%AA%E5%99%A8/2.png"></p>
<h2 id="3-配置多个拦截器"><a href="#3-配置多个拦截器" class="headerlink" title="3.配置多个拦截器"></a>3.配置多个拦截器</h2><h3 id="3-1再准备一个自定义的拦截器类"><a href="#3-1再准备一个自定义的拦截器类" class="headerlink" title="3.1再准备一个自定义的拦截器类"></a>3.1再准备一个自定义的拦截器类</h3><p><img src="/image/springMVC%E6%8B%A6%E6%88%AA%E5%99%A8/3.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.interceptor;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 配置第二个拦截器</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyInterceptor2 implements HandlerInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;MyInterceptor2执行了...前&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;MyInterceptor2执行了...后&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;MyInterceptor2执行了...最后&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2配置拦截器"><a href="#3-2配置拦截器" class="headerlink" title="3.2配置拦截器"></a>3.2配置拦截器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置拦截器组件--&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!-- 配置要拦截的方法--&gt;</span><br><span class="line">        &lt;mvc:mapping path&#x3D;&quot;&#x2F;test&#x2F;*&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 配置不拦截的方法</span><br><span class="line">        &lt;mvc:exclude-mapping path&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;!-- 配置拦截器对象--&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;com.interceptor.MyInterceptor1&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;&#x2F;mvc:interceptor&gt;</span><br><span class="line">    &lt;!-- 配置第二个拦截器--&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!-- 配置要拦截的方法--&gt;</span><br><span class="line">        &lt;mvc:mapping path&#x3D;&quot;&#x2F;test&#x2F;*&quot;&#x2F;&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;com.interceptor.MyInterceptor2&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;&#x2F;mvc:interceptor&gt;</span><br><span class="line">&lt;&#x2F;mvc:interceptors&gt;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/image/springMVC%E6%8B%A6%E6%88%AA%E5%99%A8/4.png"></p>
]]></content>
  </entry>
  <entry>
    <title>springMVC异常处理</title>
    <url>/2021/01/10/springMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="SpringMVC异常处理"><a href="#SpringMVC异常处理" class="headerlink" title="SpringMVC异常处理"></a>SpringMVC异常处理</h1><a id="more"></a>

<h2 id="编写自定义异常类-作提示信息"><a href="#编写自定义异常类-作提示信息" class="headerlink" title="编写自定义异常类(作提示信息)"></a>编写自定义异常类(作提示信息)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package exception;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 自定义的异常类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SysException extends Exception&#123;</span><br><span class="line">    &#x2F;&#x2F;存储提示信息</span><br><span class="line">    private String msg;</span><br><span class="line"></span><br><span class="line">    public String getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMsg(String msg) &#123;</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SysException(String msg) &#123;</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该类继承Exception</p>
<h2 id="自己编写一个异常"><a href="#自己编写一个异常" class="headerlink" title="自己编写一个异常"></a>自己编写一个异常</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package controller;</span><br><span class="line"></span><br><span class="line">import exception.SysException;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">public class testException &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;testException&quot;)</span><br><span class="line">    public String testException() throws SysException &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;模拟一个异常</span><br><span class="line">            int i &#x3D; 1&#x2F;0;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            &#x2F;&#x2F;打印异常信息</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            &#x2F;&#x2F;抛出自定义异常信息</span><br><span class="line">            throw new SysException(&quot;查询所有用户出现了错误.....&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写异常处理器及配置"><a href="#编写异常处理器及配置" class="headerlink" title="编写异常处理器及配置"></a>编写异常处理器及配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package exception;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 异常处理器</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SysExceptionResolver implements HandlerExceptionResolver &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 处理异常业务逻辑</span><br><span class="line">     * @param httpServletRequest</span><br><span class="line">     * @param httpServletResponse</span><br><span class="line">     * @param o</span><br><span class="line">     * @param e	抛出的异常</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object 	o, Exception e) &#123;</span><br><span class="line">        &#x2F;&#x2F;获取到异常对象</span><br><span class="line">        SysException sysException &#x3D; null;</span><br><span class="line">        &#x2F;&#x2F;instanceof用来测试一个对象是否为一个类的实例</span><br><span class="line">        if(e instanceof SysException)&#123;</span><br><span class="line">            sysException &#x3D; (SysException)e;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            e &#x3D; new SysException(&quot;系统正在维护....&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;创建ModelAndView对象</span><br><span class="line">        ModelAndView mv &#x3D; new ModelAndView();</span><br><span class="line">        &#x2F;&#x2F;将异常信息存储</span><br><span class="line">        mv.addObject(&quot;errorMsg&quot;,sysException.getMsg());</span><br><span class="line">        &#x2F;&#x2F;跳转到error.jsp页面</span><br><span class="line">        mv.setViewName(&quot;error&quot;);</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该类需要实现HandlerExceptionResolver接口</p>
<h2 id="在springmvc-xml中配置异常处理器"><a href="#在springmvc-xml中配置异常处理器" class="headerlink" title="在springmvc.xml中配置异常处理器"></a>在springmvc.xml中配置异常处理器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置异常处理器--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;sysExceptionResolver&quot; class&#x3D;&quot;exception.SysExceptionResolver&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<h2 id="跳转到的页面"><a href="#跳转到的页面" class="headerlink" title="跳转到的页面"></a>跳转到的页面</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;errorMsg&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="浏览器页面"><a href="#浏览器页面" class="headerlink" title="浏览器页面"></a>浏览器页面</h3><p><img src="/image/springMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/1.png"></p>
<h3 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h3><p><img src="/image/springMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/2.png"></p>
<p>避免了错误直接在浏览器打印，让用户体验更加友好</p>
]]></content>
  </entry>
  <entry>
    <title>springMVC的常用注解</title>
    <url>/2021/01/05/springMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="springMVC中的一些常用注解"><a href="#springMVC中的一些常用注解" class="headerlink" title="springMVC中的一些常用注解"></a>springMVC中的一些常用注解</h1><a id="more"></a>

<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><h4 id="把请求中指定名称的参数给控制器中的形参赋值"><a href="#把请求中指定名称的参数给控制器中的形参赋值" class="headerlink" title="把请求中指定名称的参数给控制器中的形参赋值"></a>把请求中指定名称的参数给控制器中的形参赋值</h4><h3 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h3><h4 id="value：请求参数中的名称。"><a href="#value：请求参数中的名称。" class="headerlink" title="value：请求参数中的名称。"></a>value：请求参数中的名称。</h4><h4 id="required：请求参数中是否必须提供该参数。默认值：true。表示必须提供，如果不提供将报错"><a href="#required：请求参数中是否必须提供该参数。默认值：true。表示必须提供，如果不提供将报错" class="headerlink" title="required：请求参数中是否必须提供该参数。默认值：true。表示必须提供，如果不提供将报错"></a>required：请求参数中是否必须提供该参数。默认值：true。表示必须提供，如果不提供将报错</h4><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="如下，写一个超链接，并携带参数username-哈哈"><a href="#如下，写一个超链接，并携带参数username-哈哈" class="headerlink" title="如下，写一个超链接，并携带参数username=哈哈"></a>如下，写一个超链接，并携带参数username=哈哈</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--RequestParam注解--&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;anno&#x2F;annoRequestParam?username&#x3D;哈哈&quot;&gt;RequestParam&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Controller层编写一个方法并接收该参数，但该方法的形参必须和请求参数中的名称一致才可赋值成功"><a href="#Controller层编写一个方法并接收该参数，但该方法的形参必须和请求参数中的名称一致才可赋值成功" class="headerlink" title="Controller层编写一个方法并接收该参数，但该方法的形参必须和请求参数中的名称一致才可赋值成功"></a>Controller层编写一个方法并接收该参数，但该方法的形参必须和请求参数中的名称一致才可赋值成功</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 测试RequestParam注解</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;annoRequestParam&quot;)</span><br><span class="line">public String testRequestParam(String username)&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(&quot;执行了&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="如果形参和请求参数的名称不一致，把请求参数的名称改为uname，则输出为null"><a href="#如果形参和请求参数的名称不一致，把请求参数的名称改为uname，则输出为null" class="headerlink" title="如果形参和请求参数的名称不一致，把请求参数的名称改为uname，则输出为null"></a>如果形参和请求参数的名称不一致，把请求参数的名称改为uname，则输出为null</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;anno&#x2F;annoRequestParam?uname&#x3D;哈哈&quot;&gt;RequestParam&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/image/springMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/1.png"></p>
<h4 id="此时可用-RequestParam注解解决，此时表示请求参数中必须有叫uname的参数，且将其给username赋值"><a href="#此时可用-RequestParam注解解决，此时表示请求参数中必须有叫uname的参数，且将其给username赋值" class="headerlink" title="此时可用@RequestParam注解解决，此时表示请求参数中必须有叫uname的参数，且将其给username赋值"></a>此时可用@RequestParam注解解决，此时表示请求参数中必须有叫uname的参数，且将其给username赋值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;annoRequestParam&quot;)</span><br><span class="line">public String testRequestParam(@RequestParam(&quot;uname&quot;) String username)&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(&quot;执行了&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/image/springMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/2.png"></p>
<br>

<hr>
<h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><h3 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h3><h4 id="用于获取请求体内容。直接使用得到是key-value-amp-key-value…-结构的数据。"><a href="#用于获取请求体内容。直接使用得到是key-value-amp-key-value…-结构的数据。" class="headerlink" title="用于获取请求体内容。直接使用得到是key=value&amp;key=value…..结构的数据。"></a>用于获取请求体内容。直接使用得到是key=value&amp;key=value…..结构的数据。</h4><h4 id="get请求方式不适用"><a href="#get请求方式不适用" class="headerlink" title="get请求方式不适用"></a>get请求方式不适用</h4><h3 id="属性：-1"><a href="#属性：-1" class="headerlink" title="属性："></a>属性：</h3><h4 id="required：是否必须有请求体。默认值是：true。当取值为true时，get请求方式会报错。如果取值为false，get请求得到的是null。"><a href="#required：是否必须有请求体。默认值是：true。当取值为true时，get请求方式会报错。如果取值为false，get请求得到的是null。" class="headerlink" title="required：是否必须有请求体。默认值是：true。当取值为true时，get请求方式会报错。如果取值为false，get请求得到的是null。"></a>required：是否必须有请求体。默认值是：true。当取值为true时，get请求方式会报错。如果取值为false，get请求得到的是null。</h4><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><h4 id="如下，编写一个form表单"><a href="#如下，编写一个form表单" class="headerlink" title="如下，编写一个form表单"></a>如下，编写一个form表单</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--RequestBody注解--&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;anno&#x2F;annoRequestBody&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">   用户姓名： &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">   用户年龄： &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;age&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Controller层编写一个方法并接收该参数，在该方法的形参前使用注解"><a href="#Controller层编写一个方法并接收该参数，在该方法的形参前使用注解" class="headerlink" title="Controller层编写一个方法并接收该参数，在该方法的形参前使用注解"></a>Controller层编写一个方法并接收该参数，在该方法的形参前使用注解</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 测试RequestBody注解</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;annoRequestBody&quot;)</span><br><span class="line">public String testRequestBody(@RequestBody String body)&#123;</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    System.out.println(&quot;执行了&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><p><img src="/image/springMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/3.png"></p>
<br>

<hr>
<h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><h3 id="作用：-2"><a href="#作用：-2" class="headerlink" title="作用："></a>作用：</h3><h4 id="用来映射URL中的占位符到目标方法的参数中。例如：url中有-delete-id-id-就是占位符"><a href="#用来映射URL中的占位符到目标方法的参数中。例如：url中有-delete-id-id-就是占位符" class="headerlink" title="用来映射URL中的占位符到目标方法的参数中。例如：url中有/delete/{id},{id}就是占位符"></a>用来映射URL中的占位符到目标方法的参数中。例如：url中有/delete/{id},{id}就是占位符</h4><h4 id="url支持占位符是spring3-0之后加入的。是springMVC支持rest风格url的一个重要标志"><a href="#url支持占位符是spring3-0之后加入的。是springMVC支持rest风格url的一个重要标志" class="headerlink" title="url支持占位符是spring3.0之后加入的。是springMVC支持rest风格url的一个重要标志"></a>url支持占位符是spring3.0之后加入的。是springMVC支持rest风格url的一个重要标志</h4><h3 id="属性：-2"><a href="#属性：-2" class="headerlink" title="属性："></a>属性：</h3><h4 id="value：指定url中占位符的名称"><a href="#value：指定url中占位符的名称" class="headerlink" title="value：指定url中占位符的名称"></a>value：指定url中占位符的名称</h4><h4 id="required：是否必须提供占位符"><a href="#required：是否必须提供占位符" class="headerlink" title="required：是否必须提供占位符"></a>required：是否必须提供占位符</h4><h3 id="Restful风格的url："><a href="#Restful风格的url：" class="headerlink" title="Restful风格的url："></a>Restful风格的url：</h3><h4 id="1-请求路径一样，可以根据不同的请求方式去执行后台的不同方法"><a href="#1-请求路径一样，可以根据不同的请求方式去执行后台的不同方法" class="headerlink" title="1.请求路径一样，可以根据不同的请求方式去执行后台的不同方法"></a>1.请求路径一样，可以根据不同的请求方式去执行后台的不同方法</h4><h4 id="2-restful风格的URL优点："><a href="#2-restful风格的URL优点：" class="headerlink" title="2.restful风格的URL优点："></a>2.restful风格的URL优点：</h4><p>1.结构清晰</p>
<p>2.符合标准</p>
<p>3.易于理解</p>
<p>4.拓展方便</p>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><h4 id="编写一个超链接"><a href="#编写一个超链接" class="headerlink" title="编写一个超链接"></a>编写一个超链接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--PathVariable注解--&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;anno&#x2F;annoPathVariable&#x2F;10&quot;&gt;PathVariable&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p>anno/annoPathVariable/10中，由anno/annoPathVariable？id = 10改为anno/annoPathVariable/10的书写方式</p>
<h4 id="在Controller层中编写一个findById-的方法"><a href="#在Controller层中编写一个findById-的方法" class="headerlink" title="在Controller层中编写一个findById()的方法"></a>在Controller层中编写一个findById()的方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 测试PathVariable注解</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;annoPathVariable&#x2F;&#123;sid&#125;&quot;)</span><br><span class="line">public String findById(@PathVariable(name &#x3D; &quot;sid&quot;) Integer id)&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    System.out.println(&quot;执行了&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时@RequestMapping(“/annoPathVariable/{id}”)采用的是restful风格的url，{id}表示占位符，其根据上文中的超链接anno/annoPathVariable/10动态赋值</p>
<p>此时使用@PathVariable(name = “sid”)用来映射URL中的占位符{sid}到目标方法的参数即id中</p>
<p>@PathVariable(name = “sid”)中name属性必须和url中的占位符一致</p>
<h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/image/springMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/4.png"></p>
<br>

<hr>
<h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><h3 id="作用：-3"><a href="#作用：-3" class="headerlink" title="作用："></a>作用：</h3><h4 id="用于获取指定请求消息头"><a href="#用于获取指定请求消息头" class="headerlink" title="用于获取指定请求消息头"></a>用于获取指定请求消息头</h4><h3 id="属性：-3"><a href="#属性：-3" class="headerlink" title="属性："></a>属性：</h3><h4 id="value：提供消息头名称"><a href="#value：提供消息头名称" class="headerlink" title="value：提供消息头名称"></a>value：提供消息头名称</h4><h4 id="required：是否必须有此消息头"><a href="#required：是否必须有此消息头" class="headerlink" title="required：是否必须有此消息头"></a>required：是否必须有此消息头</h4><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><h4 id="在实际开发中一般不怎么用"><a href="#在实际开发中一般不怎么用" class="headerlink" title="在实际开发中一般不怎么用"></a>在实际开发中一般不怎么用</h4><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><h4 id="如下，写一个超链接"><a href="#如下，写一个超链接" class="headerlink" title="如下，写一个超链接"></a>如下，写一个超链接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--RequestHeader注解--&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;anno&#x2F;annoRequestHeader?uname&#x3D;哈哈&quot;&gt;RequestHeader&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Controller层编写一个方法并接收该参数，在该方法的形参前使用注解，如我要获取Accept头的信息"><a href="#Controller层编写一个方法并接收该参数，在该方法的形参前使用注解，如我要获取Accept头的信息" class="headerlink" title="Controller层编写一个方法并接收该参数，在该方法的形参前使用注解，如我要获取Accept头的信息"></a>Controller层编写一个方法并接收该参数，在该方法的形参前使用注解，如我要获取Accept头的信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 测试RequestHeader注解</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;annoRequestHeader&quot;)</span><br><span class="line">public String testRequestHeader(@RequestHeader(value &#x3D; &quot;Accept&quot;) String header)&#123;</span><br><span class="line">    System.out.println(header);</span><br><span class="line">    System.out.println(&quot;执行了&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/image/springMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/5.png"></p>
<br>

<hr>
<h2 id="CookieValue注解"><a href="#CookieValue注解" class="headerlink" title="@CookieValue注解"></a>@CookieValue注解</h2><h3 id="作用：-4"><a href="#作用：-4" class="headerlink" title="作用："></a>作用：</h3><h4 id="用于获取指定Cookie的名称的值"><a href="#用于获取指定Cookie的名称的值" class="headerlink" title="用于获取指定Cookie的名称的值"></a>用于获取指定Cookie的名称的值</h4><h3 id="属性：-4"><a href="#属性：-4" class="headerlink" title="属性："></a>属性：</h3><h4 id="value：提供Cookie的名称"><a href="#value：提供Cookie的名称" class="headerlink" title="value：提供Cookie的名称"></a>value：提供Cookie的名称</h4><h3 id="注：-1"><a href="#注：-1" class="headerlink" title="注："></a>注：</h3><h4 id="在实际开发中一般不怎么用-1"><a href="#在实际开发中一般不怎么用-1" class="headerlink" title="在实际开发中一般不怎么用"></a>在实际开发中一般不怎么用</h4><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><h4 id="如下，写一个超链接-1"><a href="#如下，写一个超链接-1" class="headerlink" title="如下，写一个超链接"></a>如下，写一个超链接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--CookieValue注解--&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;anno&#x2F;annoCookieValue&quot;&gt;CookieValue&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Controller层编写一个方法并接收该参数，在该方法的形参前使用注解-1"><a href="#Controller层编写一个方法并接收该参数，在该方法的形参前使用注解-1" class="headerlink" title="Controller层编写一个方法并接收该参数，在该方法的形参前使用注解"></a>Controller层编写一个方法并接收该参数，在该方法的形参前使用注解</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 测试CookieValue注解</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;annoCookieValue&quot;)</span><br><span class="line">public String testCookieValue(@CookieValue(value &#x3D; &quot;JSESSIONID&quot;) String cookieValue)&#123;</span><br><span class="line">    System.out.println(cookieValue);</span><br><span class="line">    System.out.println(&quot;执行了&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/image/springMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/6.png"></p>
<br>

<hr>
<h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><h3 id="作用：-5"><a href="#作用：-5" class="headerlink" title="作用："></a>作用：</h3><h4 id="该注解是SpringMVC4-2版本后新加入的。它可以用于修饰方法和参数"><a href="#该注解是SpringMVC4-2版本后新加入的。它可以用于修饰方法和参数" class="headerlink" title="该注解是SpringMVC4.2版本后新加入的。它可以用于修饰方法和参数"></a>该注解是SpringMVC4.2版本后新加入的。它可以用于修饰方法和参数</h4><h4 id="最主要的作用是将数据添加到模型对象中，用于视图页面展示时使用。-ModelAttribute等价于-model-addAttribute-“attributeName”-abc-但是根据-ModelAttribute注释的位置不同，和其他注解组合使用，致使含义有所不同。"><a href="#最主要的作用是将数据添加到模型对象中，用于视图页面展示时使用。-ModelAttribute等价于-model-addAttribute-“attributeName”-abc-但是根据-ModelAttribute注释的位置不同，和其他注解组合使用，致使含义有所不同。" class="headerlink" title="最主要的作用是将数据添加到模型对象中，用于视图页面展示时使用。@ModelAttribute等价于 model.addAttribute(“attributeName”, abc); 但是根据@ModelAttribute注释的位置不同，和其他注解组合使用，致使含义有所不同。"></a>最主要的作用是将数据添加到模型对象中，用于视图页面展示时使用。@ModelAttribute等价于 model.addAttribute(“attributeName”, abc); 但是根据@ModelAttribute注释的位置不同，和其他注解组合使用，致使含义有所不同。</h4><h4 id="出现在方法上，表示当前方法会在控制器的方法执行前执行。它可以修饰乜有返回值的方法，也可以修饰有具体返回值的方法。"><a href="#出现在方法上，表示当前方法会在控制器的方法执行前执行。它可以修饰乜有返回值的方法，也可以修饰有具体返回值的方法。" class="headerlink" title="出现在方法上，表示当前方法会在控制器的方法执行前执行。它可以修饰乜有返回值的方法，也可以修饰有具体返回值的方法。"></a>出现在方法上，表示当前方法会在控制器的方法执行前执行。它可以修饰乜有返回值的方法，也可以修饰有具体返回值的方法。</h4><h4 id="出现在参数上，获取指定的数据给参数赋值"><a href="#出现在参数上，获取指定的数据给参数赋值" class="headerlink" title="出现在参数上，获取指定的数据给参数赋值"></a>出现在参数上，获取指定的数据给参数赋值</h4><h3 id="属性：-5"><a href="#属性：-5" class="headerlink" title="属性："></a>属性：</h3><h4 id="value：用于获取数据的key。key可以是POJO的属性名称，也可以是map结构的key"><a href="#value：用于获取数据的key。key可以是POJO的属性名称，也可以是map结构的key" class="headerlink" title="value：用于获取数据的key。key可以是POJO的属性名称，也可以是map结构的key"></a>value：用于获取数据的key。key可以是POJO的属性名称，也可以是map结构的key</h4><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><h4 id="当表单提交数据不是完整实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据"><a href="#当表单提交数据不是完整实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据" class="headerlink" title="当表单提交数据不是完整实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据"></a>当表单提交数据不是完整实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据</h4><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><h4 id="我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据是肯定没有此字段的内容，一旦更新会把该字段内容重置为null，此时就可以使用次注解解决问题"><a href="#我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据是肯定没有此字段的内容，一旦更新会把该字段内容重置为null，此时就可以使用次注解解决问题" class="headerlink" title="我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据是肯定没有此字段的内容，一旦更新会把该字段内容重置为null，此时就可以使用次注解解决问题"></a>我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据是肯定没有此字段的内容，一旦更新会把该字段内容重置为null，此时就可以使用次注解解决问题</h4><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><h4 id="（1）使用-ModelAttribute-注解有返回值的方法"><a href="#（1）使用-ModelAttribute-注解有返回值的方法" class="headerlink" title="（1）使用 @ModelAttribute 注解有返回值的方法"></a>（1）使用 @ModelAttribute 注解有返回值的方法</h4><p>user实现类中有三个属性，姓名年龄和生日</p>
<p>前端表单，无生日输入框</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--ModelAttribute注解--&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;anno&#x2F;annoModelAttribute&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    用户姓名： &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;uname&quot;&gt;&lt;br&gt;</span><br><span class="line">    用户年龄： &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;age&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>Controller层方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 测试ModelAttribute注解</span><br><span class="line"> * 真正请求的url</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;annoModelAttribute&quot;)</span><br><span class="line">public String testModelAttribute(@ModelAttribute(&quot;user&quot;) User user)&#123;		&#x2F;&#x2F;@ModelAttribute(&quot;user&quot;)从model中获取返回的user，然后</span><br><span class="line">    System.out.println(user);												&#x2F;&#x2F;由前端接收的数据覆盖，因为有返回值，这里注解可以不写	</span><br><span class="line">    System.out.println(&quot;执行了&quot;);	</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 此方法先执行</span><br><span class="line"> *&#x2F;</span><br><span class="line">@ModelAttribute</span><br><span class="line">public User findUser(@RequestParam(value&#x3D;&quot;uname&quot;) String uname)&#123;				&#x2F;*先根据uname在数据库中查询user信息*&#x2F;</span><br><span class="line">	&#x2F;&#x2F;模拟查询数据库后返回的user的信息</span><br><span class="line">    User user &#x3D; new User();</span><br><span class="line">    user.setUname(&quot;wu&quot;);</span><br><span class="line">    user.setAge(18);</span><br><span class="line">    user.setBirthday(new Date());</span><br><span class="line">    &#x2F;&#x2F;相当于将返回的数据放入model中</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这种情况隐含的将返回的数据放入model中，等同于model.addAttribute(&quot;user&quot;, user); </span><br><span class="line">如这个方法返回User类型，那么这个model属性的名称是user。</span><br><span class="line">我们可以设置@ModelAttribute的value属性来执行model中数据的key值，@ModelAttribute(&quot;user&quot;)</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="/image/springMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/7.png"></p>
<p>可见日期已经填充进来了，而不是null</p>
<h4 id="2）-ModelAttribute注释void返回值的方法"><a href="#2）-ModelAttribute注释void返回值的方法" class="headerlink" title="(2）@ModelAttribute注释void返回值的方法"></a>(2）@ModelAttribute注释void返回值的方法</h4><p>和上文只有controller方法不同</p>
<p>Controller层方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 测试ModelAttribute注解</span><br><span class="line"> * 真正的请求url</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;annoModelAttribute&quot;)</span><br><span class="line">public String testModelAttribute(@ModelAttribute(&quot;user&quot;) User user)&#123;	&#x2F;&#x2F;@ModelAttribute(&quot;user&quot;)从model中获取储存的user</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(&quot;执行了&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 此方法先执行</span><br><span class="line"> *&#x2F;</span><br><span class="line">@ModelAttribute</span><br><span class="line">public void findUser(@RequestParam(value&#x3D;&quot;uname&quot;) String uname, Model model)&#123;		&#x2F;&#x2F;形参中加入model对象	</span><br><span class="line">    User user &#x3D; new User();</span><br><span class="line">    user.setUname(&quot;wu&quot;);</span><br><span class="line">    user.setAge(18);</span><br><span class="line">    user.setBirthday(new Date());</span><br><span class="line">    &#x2F;&#x2F;将数据放入model中，底层会存储到request域对象中</span><br><span class="line">    model.addAttribute(&quot;user&quot;,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="/image/springMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/7.png"></p>
<p>与上文一致</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><h4 id="ModelAttribute-注释的方法会在Controller每个方法执行之前都执行，因此对于一个Controller中包含多个URL的时候，要谨慎使用。"><a href="#ModelAttribute-注释的方法会在Controller每个方法执行之前都执行，因此对于一个Controller中包含多个URL的时候，要谨慎使用。" class="headerlink" title="@ModelAttribute 注释的方法会在Controller每个方法执行之前都执行，因此对于一个Controller中包含多个URL的时候，要谨慎使用。"></a>@ModelAttribute 注释的方法会在Controller每个方法执行之前都执行，因此对于一个Controller中包含多个URL的时候，要谨慎使用。</h4><br>

<hr>
<h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><h3 id="作用：-6"><a href="#作用：-6" class="headerlink" title="作用："></a>作用：</h3><h4 id="用于多次执行控制器方法间的参数共享"><a href="#用于多次执行控制器方法间的参数共享" class="headerlink" title="用于多次执行控制器方法间的参数共享"></a>用于多次执行控制器方法间的参数共享</h4><h3 id="属性：-6"><a href="#属性：-6" class="headerlink" title="属性："></a>属性：</h3><h4 id="value：用于指定存入的属性名称"><a href="#value：用于指定存入的属性名称" class="headerlink" title="value：用于指定存入的属性名称"></a>value：用于指定存入的属性名称</h4><h4 id="type：用于指定存入的数据类型"><a href="#type：用于指定存入的数据类型" class="headerlink" title="type：用于指定存入的数据类型"></a>type：用于指定存入的数据类型</h4><h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><h4 id="写一个方法，将数据储存到model中"><a href="#写一个方法，将数据储存到model中" class="headerlink" title="写一个方法，将数据储存到model中"></a>写一个方法，将数据储存到model中</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 测试SessionAttribute注解</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;annoSessionAttributes&quot;)</span><br><span class="line">public String testSessionAttribute(Model model)&#123;</span><br><span class="line">    &#x2F;&#x2F;将数据放入model中，底层会存储到request域对象中</span><br><span class="line">    model.addAttribute(&quot;msg&quot;,&quot;111&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="在Controller上使用-SessionAttributes注解-可以将Model中的属性同步到session域当中。"><a href="#在Controller上使用-SessionAttributes注解-可以将Model中的属性同步到session域当中。" class="headerlink" title="在Controller上使用@SessionAttributes注解,可以将Model中的属性同步到session域当中。"></a>在Controller上使用@SessionAttributes注解,可以将Model中的属性同步到session域当中。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SessionAttributes(value &#x3D; &#123;&quot;msg&quot;&#125;)             &#x2F;&#x2F;把msg&#x3D;111存入到session域对象中</span><br><span class="line">public class AnnoController &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 测试SessionAttribute注解</span><br><span class="line">         * @return</span><br><span class="line">         *&#x2F;</span><br><span class="line">        @RequestMapping(&quot;&#x2F;annoSessionAttributes&quot;)</span><br><span class="line">        public String testSessionAttribute(Model model)&#123;</span><br><span class="line">            &#x2F;&#x2F;将数据放入model中，底层会存储到request域对象中</span><br><span class="line">            model.addAttribute(&quot;msg&quot;,&quot;111&quot;);</span><br><span class="line">            return &quot;success&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="跳转页面接收并打印session域中的数据"><a href="#跳转页面接收并打印session域中的数据" class="headerlink" title="跳转页面接收并打印session域中的数据"></a>跳转页面接收并打印session域中的数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;跳转成功&lt;&#x2F;h3&gt;</span><br><span class="line">    $&#123;sessionScope.msg&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/image/springMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/8.png"></p>
]]></content>
  </entry>
  <entry>
    <title>springMVC实现文件上传</title>
    <url>/2021/01/09/springMVC%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="SpringMVC实现文件上传"><a href="#SpringMVC实现文件上传" class="headerlink" title="SpringMVC实现文件上传"></a>SpringMVC实现文件上传</h1><a id="more"></a>

<h2 id="文件上传的前提"><a href="#文件上传的前提" class="headerlink" title="文件上传的前提"></a>文件上传的前提</h2><h3 id="1-form表单的enctype取值必须是：mutipart-form-data"><a href="#1-form表单的enctype取值必须是：mutipart-form-data" class="headerlink" title="1.form表单的enctype取值必须是：mutipart/form-data"></a>1.form表单的enctype取值必须是：mutipart/form-data</h3><p><strong>默认值是application/x-www-form-urlencoded</strong></p>
<p><strong>enctype：是表单请求正文的类型</strong></p>
<h3 id="2-method属性取值必须为post"><a href="#2-method属性取值必须为post" class="headerlink" title="2.method属性取值必须为post"></a>2.method属性取值必须为post</h3><h3 id="3-提供一个文件选择域-lt-input-type-quot-file-quot-gt"><a href="#3-提供一个文件选择域-lt-input-type-quot-file-quot-gt" class="headerlink" title="3.提供一个文件选择域 &lt;input type=&quot;file&quot;&gt;"></a>3.提供一个文件选择域 <code>&lt;input type=&quot;file&quot;&gt;</code></h3><h2 id="第一步：jsp页面书写"><a href="#第一步：jsp页面书写" class="headerlink" title="第一步：jsp页面书写"></a>第一步：jsp页面书写</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;SpringMVC文件上传&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;user&#x2F;fileUpload&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    选择文件：&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;upload&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;点击上传&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器</strong></p>
<h2 id="第二步：配置文件解析器"><a href="#第二步：配置文件解析器" class="headerlink" title="第二步：配置文件解析器"></a>第二步：配置文件解析器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置文件解析器对象 id一定要是multipartResolver，springMVC会根据此id找解析器--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;multipartResolver&quot; class&#x3D;&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">	&lt;!--文件上传最大：10M--&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;maxInMemorySize&quot; value&#x3D;&quot;10485760&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<h2 id="第三步：controller层书写"><a href="#第三步：controller层书写" class="headerlink" title="第三步：controller层书写"></a>第三步：controller层书写</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;fileUpload&quot;)</span><br><span class="line">public String testFileUpload(HttpServletRequest request, MultipartFile upload) throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F;上传的位置</span><br><span class="line">    String path &#x3D; &quot;D:&#x2F;springMVC_fileUpload&#x2F;src&#x2F;main&#x2F;webapp&#x2F;img&quot;;</span><br><span class="line">    &#x2F;&#x2F;获取上传文件名</span><br><span class="line">    String filename &#x3D; upload.getOriginalFilename();</span><br><span class="line">    &#x2F;&#x2F;把文件名称设置唯一值</span><br><span class="line">    String uuid &#x3D; UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">    filename &#x3D; uuid+&quot;_&quot;+filename;</span><br><span class="line">    &#x2F;&#x2F;完成文件上传</span><br><span class="line">    upload.transferTo(new File(path,filename));</span><br><span class="line"></span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><strong>1.Spring MVC会将上传的文件绑定到MultipartFile对象中。MultipartFile提供了获取上传文件内容、文件名等方法。通过transferTo()方法还可以将文件存储到硬件中。</strong></p>
<p><strong>MultipartFile对象中的常用方法如下：</strong></p>
<p><strong># void transferTo(File dest)：将上传文件保存到一个目录文件中；</strong></p>
<p><strong># String getOriginalFilename()：获取上传文件的原名</strong></p>
<p><strong># String getContentType[]：获取文件MIME类型，如image/jpeg等</strong></p>
<p><strong># boolean isEmpty()：是否有上传文件</strong></p>
<p><strong>2.MultipartFile upload 中upload和form表单中input的name必须相同</strong><br><strong>3.path是上传到我的服务器中的具体文件夹的地址</strong></p>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/image/springMVC%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/1.png"></p>
<p><img src="/image/springMVC%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2.png"></p>
<p><img src="/image/springMVC%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/3.png"></p>
<h2 id="所需的两个jar包"><a href="#所需的两个jar包" class="headerlink" title="所需的两个jar包"></a>所需的两个jar包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--文件上传的jar包--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.1&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>springMVC自定义类型转换器</title>
    <url>/2021/01/05/springMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
    <content><![CDATA[<h1 id="springMVC自定义类型转换器"><a href="#springMVC自定义类型转换器" class="headerlink" title="springMVC自定义类型转换器"></a>springMVC自定义类型转换器</h1><a id="more"></a>

<h2 id="1-表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封"><a href="#1-表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封" class="headerlink" title="1.表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封"></a>1.表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封</h2><h2 id="装上，说明Spring框架内部会默认进行数据类型转换。"><a href="#装上，说明Spring框架内部会默认进行数据类型转换。" class="headerlink" title="装上，说明Spring框架内部会默认进行数据类型转换。"></a>装上，说明Spring框架内部会默认进行数据类型转换。</h2><h3 id="如下，以日期格式为例"><a href="#如下，以日期格式为例" class="headerlink" title="如下，以日期格式为例"></a>如下，以日期格式为例</h3><p><img src="/image/springMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/1.png"></p>
<h3 id="输入2020-10-2的格式，后台会自动解析该格式"><a href="#输入2020-10-2的格式，后台会自动解析该格式" class="headerlink" title="输入2020/10/2的格式，后台会自动解析该格式"></a>输入2020/10/2的格式，后台会自动解析该格式</h3><p><img src="/image/springMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/2.png"></p>
<h3 id="但是如果我们输入2020-10-2的格式，后台将无法识别，此时我们可以自定义一个类型转换器"><a href="#但是如果我们输入2020-10-2的格式，后台将无法识别，此时我们可以自定义一个类型转换器" class="headerlink" title="但是如果我们输入2020-10-2的格式，后台将无法识别，此时我们可以自定义一个类型转换器"></a>但是如果我们输入2020-10-2的格式，后台将无法识别，此时我们可以自定义一个类型转换器</h3><p><img src="/image/springMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/3.png"></p>
<p><img src="/image/springMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/4.png"></p>
<h2 id="2-如果想自定义数据类型转换，可以实现Converter的接口"><a href="#2-如果想自定义数据类型转换，可以实现Converter的接口" class="headerlink" title="2.如果想自定义数据类型转换，可以实现Converter的接口"></a>2.如果想自定义数据类型转换，可以实现Converter的接口</h2><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="1-自定义类型转换器"><a href="#1-自定义类型转换器" class="headerlink" title="1.自定义类型转换器"></a>1.自定义类型转换器</h4><h5 id="新建一个类，实现Converter-lt-S-T-gt-接口，其中S表示接受的数据类型，T表示转换为的数据类型"><a href="#新建一个类，实现Converter-lt-S-T-gt-接口，其中S表示接受的数据类型，T表示转换为的数据类型" class="headerlink" title="新建一个类，实现Converter&lt;S, T&gt;接口，其中S表示接受的数据类型，T表示转换为的数据类型"></a>新建一个类，实现Converter&lt;S, T&gt;接口，其中S表示接受的数据类型，T表示转换为的数据类型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StringToDateConverter implements Converter&lt;String, Date&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *</span><br><span class="line">     * @param s 传入进来的字符串</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public Date convert(String s) &#123;</span><br><span class="line">        if(s &#x3D;&#x3D; null)&#123;</span><br><span class="line">            throw new RuntimeException(&quot;请您传入数据&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        DateFormat df &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        &#x2F;&#x2F;把字符串转换成日期</span><br><span class="line">        try &#123;</span><br><span class="line">            return df.parse(s);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;数据类型转换错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-注册自定义类型转换器，在springmvc-xml配置文件中编写配置"><a href="#2-注册自定义类型转换器，在springmvc-xml配置文件中编写配置" class="headerlink" title="2.注册自定义类型转换器，在springmvc.xml配置文件中编写配置"></a>2.注册自定义类型转换器，在springmvc.xml配置文件中编写配置</h4><h5 id="在springmvc-xml中，配置自定义类型转换器"><a href="#在springmvc-xml中，配置自定义类型转换器" class="headerlink" title="在springmvc.xml中，配置自定义类型转换器"></a>在springmvc.xml中，配置自定义类型转换器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置自定义类型转换器--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;conversionServiceFactoryBean&quot; class&#x3D;&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">   </span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<h5 id="在其中注册我们上文中自定义的类"><a href="#在其中注册我们上文中自定义的类" class="headerlink" title="在其中注册我们上文中自定义的类"></a>在其中注册我们上文中自定义的类</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置自定义类型转换器--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;conversionServiceFactoryBean&quot; class&#x3D;&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;converters&quot;&gt;</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;!--注册自定义的类型转换器--&gt;</span><br><span class="line">            &lt;bean class&#x3D;&quot;utils.StringToDateConverter&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<h5 id="最后别忘了在mvc-annotation-driven标签中配置我们自定义的类型转换器"><a href="#最后别忘了在mvc-annotation-driven标签中配置我们自定义的类型转换器" class="headerlink" title="最后别忘了在mvc:annotation-driven标签中配置我们自定义的类型转换器"></a>最后别忘了在mvc:annotation-driven标签中配置我们自定义的类型转换器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--开启SpringMVC框架注解的支持--&gt;</span><br><span class="line">&lt;mvc:annotation-driven conversion-service&#x3D;&quot;conversionServiceFactoryBean&quot;&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>
<h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/image/springMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/3.png"></p>
<p><img src="/image/springMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/2.png"></p>
]]></content>
  </entry>
  <entry>
    <title>springMVC请求参数绑定</title>
    <url>/2021/01/03/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="一-请求参数的绑定说明"><a href="#一-请求参数的绑定说明" class="headerlink" title="一.请求参数的绑定说明"></a>一.请求参数的绑定说明</h2><a id="more"></a>

<h3 id="1-绑定机制"><a href="#1-绑定机制" class="headerlink" title="1.绑定机制"></a>1.绑定机制</h3><h4 id="1-表单提交的数据都是k-v格式的-例：username-123-amp-password-123"><a href="#1-表单提交的数据都是k-v格式的-例：username-123-amp-password-123" class="headerlink" title="1.表单提交的数据都是k=v格式的    例：username=123&amp;password=123"></a>1.表单提交的数据都是k=v格式的    例：username=123&amp;password=123</h4><h4 id="2-SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定"><a href="#2-SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定" class="headerlink" title="2.SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定"></a>2.SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定</h4><h4 id="3-要求：提交的表单name和参数的名称是相同的"><a href="#3-要求：提交的表单name和参数的名称是相同的" class="headerlink" title="3.要求：提交的表单name和参数的名称是相同的"></a>3.要求：提交的表单name和参数的名称是相同的</h4><h3 id="2-支持的数据类型"><a href="#2-支持的数据类型" class="headerlink" title="2.支持的数据类型"></a>2.支持的数据类型</h3><h4 id="1-基本数据类型和字符串类型"><a href="#1-基本数据类型和字符串类型" class="headerlink" title="1.基本数据类型和字符串类型"></a>1.基本数据类型和字符串类型</h4><h5 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h5><h5 id="1-提交表单的name和JavaBean中的属性名称是相同的"><a href="#1-提交表单的name和JavaBean中的属性名称是相同的" class="headerlink" title="1.提交表单的name和JavaBean中的属性名称是相同的"></a>1.提交表单的name和JavaBean中的属性名称是相同的</h5><p>jsp页面中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;user&#x2F;hello?username&#x3D;123&quot;&gt;入门程序&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p>controller类中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(path &#x3D; &quot;hello&quot;)</span><br><span class="line">public String testParam(String username)&#123;</span><br><span class="line">    System.out.println(&quot;执行了。。。。&quot;);</span><br><span class="line">    System.out.println(&quot;username:&quot;+username);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spring中把表单提交的请求参数，作为控制器中方法的参数进行绑定，所以testParam方法的参数和传过来的username进行了绑定，</p>
<p>System.out.println(“username:”+username);输出的username就是传过来的username</p>
<h5 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h5><p><img src="/image/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/1.png"></p>
<h5 id="2-区分大小写"><a href="#2-区分大小写" class="headerlink" title="2.区分大小写"></a>2.区分大小写</h5><h4 id="2-实体类型（javaBean）"><a href="#2-实体类型（javaBean）" class="headerlink" title="2.实体类型（javaBean）"></a>2.实体类型（javaBean）</h4><h5 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a>注意事项：</h5><h5 id="1-提交表单的name和JavaBean中的属性名称是相同的-1"><a href="#1-提交表单的name和JavaBean中的属性名称是相同的-1" class="headerlink" title="1.提交表单的name和JavaBean中的属性名称是相同的"></a>1.提交表单的name和JavaBean中的属性名称是相同的</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;param&#x2F;saveAccount&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">    金额：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;money&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<h5 id="2-如果一个JavaBean类中包含其他引用类型，那么表单的name属性需要编写成：对象-属性-例：adress-name"><a href="#2-如果一个JavaBean类中包含其他引用类型，那么表单的name属性需要编写成：对象-属性-例：adress-name" class="headerlink" title="2.如果一个JavaBean类中包含其他引用类型，那么表单的name属性需要编写成：对象.属性    例：adress.name"></a>2.如果一个JavaBean类中包含其他引用类型，那么表单的name属性需要编写成：对象.属性    例：adress.name</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;param&#x2F;saveAccount&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">    金额：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;money&quot;&gt;&lt;br&gt;</span><br><span class="line">    用户的姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user.uname&quot;&gt;&lt;br&gt;     &lt;!--name&#x3D;&quot;user.uname&quot;表示封装到account类中引用的user类中的uname属性--&gt;</span><br><span class="line">    用户的年龄：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user.age&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>此时控制器中方法的参数为封装到的实体类对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(path &#x3D; &quot;saveAccount&quot;)</span><br><span class="line">public String saveAccount(Account account)&#123;</span><br><span class="line">    System.out.println(&quot;执行了。。。。&quot;);</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h5><p><img src="/image/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/2.png"></p>
<h4 id="3-集合数据类型（List、Map类型等）"><a href="#3-集合数据类型（List、Map类型等）" class="headerlink" title="3.集合数据类型（List、Map类型等）"></a>3.集合数据类型（List、Map类型等）</h4><h5 id="0-Account实体类中有list和map集合，list泛型为User，map键值对为String-User"><a href="#0-Account实体类中有list和map集合，list泛型为User，map键值对为String-User" class="headerlink" title="0.Account实体类中有list和map集合，list泛型为User，map键值对为String:User"></a>0.Account实体类中有list和map集合，list泛型为User，map键值对为String:User</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Account implements Serializable &#123;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private Float money;</span><br><span class="line"></span><br><span class="line">    private List&lt;User&gt; list;</span><br><span class="line">    private Map&lt;String,User&gt; map;</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username &#x3D; username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Float getMoney() &#123;</span><br><span class="line">        return money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMoney(Float money) &#123;</span><br><span class="line">        this.money &#x3D; money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;User&gt; getList() &#123;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setList(List&lt;User&gt; list) &#123;</span><br><span class="line">        this.list &#x3D; list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Map&lt;String, User&gt; getMap() &#123;</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMap(Map&lt;String, User&gt; map) &#123;</span><br><span class="line">        this.map &#x3D; map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Account&#123;&quot; +</span><br><span class="line">                &quot;username&#x3D;&#39;&quot; + username + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, password&#x3D;&#39;&quot; + password + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, money&#x3D;&quot; + money +</span><br><span class="line">                &quot;, list&#x3D;&quot; + list +</span><br><span class="line">                &quot;, map&#x3D;&quot; + map +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="1-jsp页面编写方式：list-0-属性"><a href="#1-jsp页面编写方式：list-0-属性" class="headerlink" title="1.jsp页面编写方式：list[0].属性"></a>1.jsp页面编写方式：list[0].属性</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;param&#x2F;saveAccount&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">    金额：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;money&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;%--先封装到user对象，再存入集合--%&gt;</span><br><span class="line">    用户的姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;list[0].uname&quot;&gt;&lt;br&gt;</span><br><span class="line">    用户的年龄：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;list[0].age&quot;&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    用户的姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;map[&#39;one&#39;].uname&quot;&gt;&lt;br&gt;</span><br><span class="line">    用户的年龄：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;map[&#39;one&#39;].age&quot;&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>list集合时name属性书写方法为name=”list[0].uname”，表示先将对应的参数封装到user对象，再存入集合中的第0个位置</p>
<p>map集合时name属性书写方法为name=”map[‘one’].uname，表示先将对应的参数封装到user对象，再存入map集合中的key=one,value=user的键值对中</p>
<h5 id="2-controller中方法的书写"><a href="#2-controller中方法的书写" class="headerlink" title="2.controller中方法的书写"></a>2.controller中方法的书写</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(path &#x3D; &quot;saveAccount&quot;)</span><br><span class="line">public String saveAccount(Account account)&#123;</span><br><span class="line">    System.out.println(&quot;执行了。。。。&quot;);</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="执行结果-2"><a href="#执行结果-2" class="headerlink" title="执行结果"></a>执行结果</h5><p><img src="/image/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/3.1.png"><img src="/image/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/3.2.png"></p>
<h2 id="二、使用过滤器解决乱码问题"><a href="#二、使用过滤器解决乱码问题" class="headerlink" title="二、使用过滤器解决乱码问题"></a>二、使用过滤器解决乱码问题</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>若请求为post，且请求参数为中文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;user&#x2F;hello&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/image/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/3.1.png"><img src="/image/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/4.png"></p>
<p>此时运行结果</p>
<p><img src="/image/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/3.1.png"><img src="/image/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/5.1.png"></p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>在web.xml中配置如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置解决中文乱码的过滤器--&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">  &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">  &lt;!--初始化参数--&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">    &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">  &lt;&#x2F;init-param&gt;</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">  &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>
<p>即可，运行结果如下</p>
<p><img src="/image/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/3.1.png"><img src="/image/springMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/5.2.png"></p>
]]></content>
  </entry>
  <entry>
    <title>spring创建bean的三种方式</title>
    <url>/2021/03/15/spring%E5%88%9B%E5%BB%BAbean%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="spring创建bean的三种方式"><a href="#spring创建bean的三种方式" class="headerlink" title="spring创建bean的三种方式"></a>spring创建bean的三种方式</h1><a id="more"></a>

<h2 id="1-使用默认构造函数创建"><a href="#1-使用默认构造函数创建" class="headerlink" title="1.使用默认构造函数创建"></a>1.使用默认构造函数创建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在spring的配置文件中使用bean标签，配以id和class属性后，且没有其他属性和标签时。</span><br><span class="line">采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</span><br></pre></td></tr></table></figure>
<p>例：</p>
<p>如果在AccountService_impl实现类中创建含参构造函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public AccountService_impl(String name)&#123;</span><br><span class="line">    System.out.println(&quot;对象创建了&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在bean.xml配置文件中配置以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;AccountService_impl&quot; class&#x3D;&quot;service.impl.AccountService_impl&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>


<p>运行结果：</p>
<p><img src="/image/spring%E5%88%9B%E5%BB%BAbean%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/1.png"></p>
<p>可见对象创建失败</p>
<h2 id="2-使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）"><a href="#2-使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）" class="headerlink" title="2.使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）"></a>2.使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</h2><p>例：</p>
<p>模拟一个工厂类（该类可能是存在于jar包中的，我们无法通过修改源码的方式来提供默认构造函数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class InstanceFactory &#123;</span><br><span class="line">    public IAccountService getAccountService_impl()&#123;</span><br><span class="line">        return new AccountService_impl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在bean.xml配置文件中配置以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;InstanceFactory&quot; class&#x3D;&quot;factory.InstanceFactory&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;AccountService_impl&quot; factory-bean&#x3D;&quot;InstanceFactory&quot; factory-method&#x3D;&quot;getAccountService_impl&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>


<p>运行结果：</p>
<p><img src="/image/spring%E5%88%9B%E5%BB%BAbean%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/2.png"></p>
<h2 id="3-使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）"><a href="#3-使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）" class="headerlink" title="3.使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）"></a>3.使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）</h2><p>例：</p>
<p>模拟一个工厂类，该类中含有静态方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StaticFactory &#123;</span><br><span class="line">    public static IAccountService getAccountService_impl()&#123;</span><br><span class="line">        return new AccountService_impl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在bean.xml配置文件中配置以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;AccountService_impl&quot; class&#x3D;&quot;factory.StaticFactory&quot; factory-method&#x3D;&quot;getAccountService_impl&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/image/spring%E5%88%9B%E5%BB%BAbean%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/2.png"></p>
]]></content>
  </entry>
  <entry>
    <title>spring基于XMl的依赖注入</title>
    <url>/2021/03/16/spring%E5%9F%BA%E4%BA%8EXMl%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="spring基于XMl的依赖注入"><a href="#spring基于XMl的依赖注入" class="headerlink" title="spring基于XMl的依赖注入"></a>spring基于XMl的依赖注入</h1><a id="more"></a>

<p>依赖注入：<br>                能注入的数据：有三类<br>                    基本类型和String<br>                    其他bean类型（在配置文件中或者注解配置过的bean）<br>                    复杂类型/集合类型<br>                注入方式：有三种<br>                    第一种：使用构造函数提供<br>                    第二种：使用set方法提供<br>                    第三种：使用注解提供</p>
<h2 id="一-使用构造函数注入"><a href="#一-使用构造函数注入" class="headerlink" title="一.使用构造函数注入"></a>一.使用构造函数注入</h2><p>使用的标签：constructor-arg<br>         标签出现的位置：bean标签的内部<br>         标签中的属性：<br>                type：用于指定要注入数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型<br>                index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始的<br>                name：用于指定给构造函数中指定名称的参数赋值                                             常用<br>                ==========================以上是三个用于指定给构造函数中哪个参数赋值==============================<br>                value：用于提供基本类型和String类型的数据<br>                ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc容器中出现过的bean对象</p>
<p><strong>例</strong>：</p>
<p>在实现类中定义一些变量，并创建构造函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AccountService_impl implements IAccountService &#123;</span><br><span class="line">    &#x2F;&#x2F;如果是经常变化的数据，并不使用构造函数注入</span><br><span class="line">    private Integer a;</span><br><span class="line">    private String b;</span><br><span class="line">    private Date c;</span><br><span class="line"></span><br><span class="line">    public AccountService_impl(Integer a, String b, Date c)&#123;</span><br><span class="line">        this.a &#x3D; a;</span><br><span class="line">        this.b &#x3D; b;</span><br><span class="line">        this.c &#x3D; c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void saveAccount() &#123;</span><br><span class="line">        System.out.println(&quot;执行成功：&quot;+b+&quot;,&quot;+a+&quot;,&quot;+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在bean.xml中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;AccountService_impl&quot; class&#x3D;&quot;service.impl.AccountService_impl&quot;&gt;</span><br><span class="line">    &lt;constructor-arg name&#x3D;&quot;a&quot; value&#x3D;&quot;18&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg name&#x3D;&quot;b&quot; value&#x3D;&quot;赖永俊&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg name&#x3D;&quot;c&quot; ref&#x3D;&quot;now&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<p>调用saveAccount()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class saveAccount &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        IAccountService accountService_impl &#x3D; ac.getBean(&quot;AccountService_impl&quot;, IAccountService.class);</span><br><span class="line"></span><br><span class="line">        accountService_impl.saveAccount();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/image/spring%E5%9F%BA%E4%BA%8EXMl%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/1.png"></p>
<h3 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h3><p>​            在获取bean对象时，注入数据时必须的操作，否则对象无法创建成功。</p>
<h3 id="弊端："><a href="#弊端：" class="headerlink" title="弊端："></a>弊端：</h3><p>​            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供</p>
<h2 id="二-使用set方法注入"><a href="#二-使用set方法注入" class="headerlink" title="二.使用set方法注入"></a>二.使用set方法注入</h2><p>set方法注入        更常用的方式<br>        涉及的标签：properties<br>        出现的位置：bean标签内部<br>        标签的属性：<br>            name：用于指定注入时所调用的set方法名称<br>            value：用于提供基本类型和String类型的数据<br>            ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc容器中出现过的bean对象</p>
<p><strong>例</strong>：</p>
<p>在实现类中定义一些变量，并创建set方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AccountService_impl2 implements IAccountService &#123;</span><br><span class="line">    private Integer a;</span><br><span class="line">    private String b;</span><br><span class="line">    private Date c;</span><br><span class="line"></span><br><span class="line">    public void setA(Integer a) &#123;</span><br><span class="line">        this.a &#x3D; a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setB(String b) &#123;</span><br><span class="line">        this.b &#x3D; b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setC(Date c) &#123;</span><br><span class="line">        this.c &#x3D; c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void saveAccount() &#123;</span><br><span class="line">        System.out.println(&quot;执行成功：&quot;+b+&quot;,&quot;+a+&quot;,&quot;+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在bean.xml中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;AccountService_impl2&quot; class&#x3D;&quot;service.impl.AccountService_impl2&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;a&quot; value&#x3D;&quot;18&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;b&quot; value&#x3D;&quot;赖永俊&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;c&quot; ref&#x3D;&quot;now&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id&#x3D;&quot;now&quot; class&#x3D;&quot;java.util.Date&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<p>调用saveAccount()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class saveAccount &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line"></span><br><span class="line">        IAccountService accountService_impl2 &#x3D; ac.getBean(&quot;AccountService_impl2&quot;, IAccountService.class);</span><br><span class="line">        </span><br><span class="line">        accountService_impl2.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/image/spring%E5%9F%BA%E4%BA%8EXMl%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/1.png"></p>
<h3 id="优势：-1"><a href="#优势：-1" class="headerlink" title="优势："></a>优势：</h3><p>​            创建对象时，没有明确的限制，可以直接使用默认构造函数</p>
<h3 id="弊端：-1"><a href="#弊端：-1" class="headerlink" title="弊端："></a>弊端：</h3><p>​            如果有某个成员必须有值，则获取对象时有可能set方法没有执行</p>
<h2 id="三-复杂类型的注入-集合类型的注入"><a href="#三-复杂类型的注入-集合类型的注入" class="headerlink" title="三.复杂类型的注入/集合类型的注入"></a>三.复杂类型的注入/集合类型的注入</h2><p>用于给List结构集合注入的标签：<br>            list array set<br>        用于给Map结构集合注入的标签：<br>            map props<br>        结构相同，标签可以互换</p>
<p><strong>例：</strong></p>
<p>在实现类中定义一些数组和集合，并创建set方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AccountService_impl3 implements IAccountService &#123;</span><br><span class="line">    private String[] myStrs;</span><br><span class="line">    private List&lt;String&gt; myList;</span><br><span class="line">    private Set&lt;String&gt; mySet;</span><br><span class="line">    private Map&lt;String,String&gt; myMap;</span><br><span class="line">    private Properties myProps;</span><br><span class="line"></span><br><span class="line">    public void setMyStrs(String[] myStrs) &#123;</span><br><span class="line">        this.myStrs &#x3D; myStrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMyList(List&lt;String&gt; myList) &#123;</span><br><span class="line">        this.myList &#x3D; myList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMySet(Set&lt;String&gt; mySets) &#123;</span><br><span class="line">        this.mySet &#x3D; mySets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMyMap(Map&lt;String, String&gt; myMap) &#123;</span><br><span class="line">        this.myMap &#x3D; myMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMyProps(Properties myProps) &#123;</span><br><span class="line">        this.myProps &#x3D; myProps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void saveAccount() &#123;</span><br><span class="line">        System.out.println(Arrays.toString(myStrs));</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">        System.out.println(mySet);</span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myProps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在bean.xml中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;AccountService_impl3&quot; class&#x3D;&quot;service.impl.AccountService_impl3&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;myStrs&quot;&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;value&gt;赖永俊&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;流氓周&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;谢特伟&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;array&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;myList&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;111&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;222&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;333&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;list&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;mySet&quot;&gt;</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;value&gt;111&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;222&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;333&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;myMap&quot;&gt;</span><br><span class="line">        &lt;map&gt;</span><br><span class="line">            &lt;entry key&#x3D;&quot;one&quot; value&#x3D;&quot;赖永俊&quot;&gt;&lt;&#x2F;entry&gt;</span><br><span class="line">            &lt;entry key&#x3D;&quot;two&quot; value&#x3D;&quot;流氓周&quot;&gt;&lt;&#x2F;entry&gt;</span><br><span class="line">            &lt;entry key&#x3D;&quot;three&quot; value&#x3D;&quot;谢特伟&quot;&gt;&lt;&#x2F;entry&gt;</span><br><span class="line">        &lt;&#x2F;map&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;myProps&quot;&gt;</span><br><span class="line">        &lt;props&gt;</span><br><span class="line">            &lt;prop key&#x3D;&quot;one&quot;&gt;赖永俊&lt;&#x2F;prop&gt;</span><br><span class="line">            &lt;prop key&#x3D;&quot;two&quot;&gt;流氓周&lt;&#x2F;prop&gt;</span><br><span class="line">            &lt;prop key&#x3D;&quot;three&quot;&gt;谢特伟&lt;&#x2F;prop&gt;</span><br><span class="line">        &lt;&#x2F;props&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<p>调用saveAccount()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class saveAccount &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line"></span><br><span class="line">        IAccountService accountService_impl3 &#x3D; ac.getBean(&quot;AccountService_impl3&quot;, IAccountService.class);</span><br><span class="line">        </span><br><span class="line">        accountService_impl3.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/image/spring%E5%9F%BA%E4%BA%8EXMl%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/2.png"></p>
]]></content>
  </entry>
  <entry>
    <title>spring基于xml的声明式事务控制</title>
    <url>/2020/12/30/spring%E5%9F%BA%E4%BA%8Exml%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="spring中基于xml的声明式事务控制"><a href="#spring中基于xml的声明式事务控制" class="headerlink" title="spring中基于xml的声明式事务控制"></a>spring中基于xml的声明式事务控制</h1><h2 id="一、配置事务管理器"><a href="#一、配置事务管理器" class="headerlink" title="一、配置事务管理器"></a>一、配置事务管理器</h2><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;				</span><br><span class="line">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<h2 id="二、使用tx-advice标签配置事务通知"><a href="#二、使用tx-advice标签配置事务通知" class="headerlink" title="二、使用tx:advice标签配置事务通知"></a>二、使用tx:advice标签配置事务通知</h2><p>注意：此时我们需要导入事务的约束 tx的名称空间和约束，同时也需要AOP的；transaction-manager属性指定上文配置的事务管理器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;tx:advice&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">属性：</span><br><span class="line">    id：给事务通知起一个唯一标识</span><br><span class="line">    transaction：给事务通知提供一个事务管理器的引用</span><br></pre></td></tr></table></figure>
<h2 id="三、使用tx-attributes标签配置事务的属性"><a href="#三、使用tx-attributes标签配置事务的属性" class="headerlink" title="三、使用tx:attributes标签配置事务的属性"></a>三、使用tx:attributes标签配置事务的属性</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">    &lt;tx:method name&#x3D;&quot;*&quot; propagation&#x3D;&quot;REQUIRED&quot; read-only&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">    &lt;tx:method name&#x3D;&quot;find*&quot; propagation&#x3D;&quot;SUPPORTS&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;tx:attributes&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置事务的属性</span><br><span class="line">		name：指定方法名称来配置其事务属性</span><br><span class="line">        isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别</span><br><span class="line">        propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询的方法可以选择SUPPORTS。</span><br><span class="line">        read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。</span><br><span class="line">        timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。</span><br><span class="line">        rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事物不回滚。没有默认值。表示任何异常都回滚</span><br><span class="line">        no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事物回滚。没有默认值。表示任何异常都回滚</span><br></pre></td></tr></table></figure>
<h2 id="四、配置AOP中及通用切入点"><a href="#四、配置AOP中及通用切入点" class="headerlink" title="四、配置AOP中及通用切入点"></a>四、配置AOP中及通用切入点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--配置切入点表达式--&gt;</span><br><span class="line">    &lt;aop:pointcut id&#x3D;&quot;pt1&quot; expression&#x3D;&quot;execution(* service.impl.*.*(..))&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>
<h2 id="五、使用aop-advisor标签建立事务通知和切入点表达式的对应关系"><a href="#五、使用aop-advisor标签建立事务通知和切入点表达式的对应关系" class="headerlink" title="五、使用aop:advisor标签建立事务通知和切入点表达式的对应关系"></a>五、使用aop:advisor标签建立事务通知和切入点表达式的对应关系</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--配置切入点表达式--&gt;</span><br><span class="line">    &lt;aop:pointcut id&#x3D;&quot;pt1&quot; expression&#x3D;&quot;execution(* service.impl.*.*(..))&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!--建立切入点表达式和事务通知的关系--&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut-ref&#x3D;&quot;pt1&quot;&gt;&lt;&#x2F;aop:advisor&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>​        1.aop:advisor标签是在事务的通知tx:advice标签的内部</p>
<p>​        2.advice-ref属性指向配置的事务通知</p>
<h1 id="相关的配置资源"><a href="#相关的配置资源" class="headerlink" title="相关的配置资源"></a>相关的配置资源</h1><h2 id="1-配置文件的约束"><a href="#1-配置文件的约束" class="headerlink" title="1.配置文件的约束"></a>1.配置文件的约束</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="2-所需maven依赖"><a href="#2-所需maven依赖" class="headerlink" title="2.所需maven依赖"></a>2.所需maven依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.0.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.0.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.0.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;8.0.19&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.8.7&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>spring基于注解的声明式事务控制</title>
    <url>/2020/12/31/spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="spring基于注解的声明式事务控制"><a href="#spring基于注解的声明式事务控制" class="headerlink" title="spring基于注解的声明式事务控制"></a>spring基于注解的声明式事务控制</h1><p>注意：我是用的注解创建ioc容器，不要忘记了配置扫描</p>
<a id="more"></a>

<h2 id="一、配置事务管理器"><a href="#一、配置事务管理器" class="headerlink" title="一、配置事务管理器"></a>一、配置事务管理器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置事务管理器--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">	&lt;!--注入数据源--&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<p>这里需要注入一个数据源，相关数据源自己另配。</p>
<h2 id="二、开启sprig对注解事务的支持"><a href="#二、开启sprig对注解事务的支持" class="headerlink" title="二、开启sprig对注解事务的支持"></a>二、开启sprig对注解事务的支持</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--开启spring对注解事务的支持--&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:annotation-driven&gt;</span><br></pre></td></tr></table></figure>
<p>transaction-manager属性引用的是上文配置的事务管理器</p>
<h2 id="三、在需要事务支持的地方加入-transactional注解"><a href="#三、在需要事务支持的地方加入-transactional注解" class="headerlink" title="三、在需要事务支持的地方加入@transactional注解"></a>三、在需要事务支持的地方加入@transactional注解</h2><h3 id="例：我的是一个转账案例，我为service的实现类配置了事务"><a href="#例：我的是一个转账案例，我为service的实现类配置了事务" class="headerlink" title="例：我的是一个转账案例，我为service的实现类配置了事务"></a>例：我的是一个转账案例，我为service的实现类配置了事务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service(&quot;accountService&quot;)</span><br><span class="line">@Transactional(propagation &#x3D; Propagation.SUPPORTS,readOnly &#x3D; true)</span><br><span class="line">public class AccountService_impl implements AccountService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Account&gt; findAll() &#123;</span><br><span class="line">        return accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void transfer(String sourceName, String targetName, Float money) &#123;</span><br><span class="line">        &#x2F;&#x2F;1.获取转账的用户</span><br><span class="line">        Account sourceAccount &#x3D; accountDao.findByName(sourceName);</span><br><span class="line">        &#x2F;&#x2F;2.获取被转账用户</span><br><span class="line">        Account targetAccount &#x3D; accountDao.findByName(targetName);</span><br><span class="line">        &#x2F;&#x2F;3.转账操作</span><br><span class="line">        sourceAccount.setMoney(sourceAccount.getMoney()-money);</span><br><span class="line">        targetAccount.setMoney(targetAccount.getMoney()+money);</span><br><span class="line">        &#x2F;&#x2F;4.更新操作</span><br><span class="line">        accountDao.updateAccount(sourceAccount);</span><br><span class="line">        int i &#x3D; 1&#x2F;0;</span><br><span class="line">        accountDao.updateAccount(targetAccount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="transactional注解的属性"><a href="#transactional注解的属性" class="headerlink" title="@transactional注解的属性"></a>@transactional注解的属性</h4><p>propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询的方法可以选择SUPPORTS。</p>
<p>readOnly：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。</p>
<p>一般情况下配置这两个属性就行了</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>此时配置的propagation为SUPPORTS，表示如果没有事务，也不会自动添加事务的支持，一般用于查询方法这种不需要事务支持的；</p>
<p>readOnly也为true，表示只可读。</p>
<p>这显然不符合我们的要求，因为为我们的转账方法需要事务的支持。所以我们要在转账方法上单独配置属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation &#x3D; Propagation.REQUIRED,readOnly &#x3D; false)</span><br><span class="line">public void transfer(String sourceName, String targetName, Float money) &#123;</span><br><span class="line">    &#x2F;&#x2F;1.获取转账的用户</span><br><span class="line">    Account sourceAccount &#x3D; accountDao.findByName(sourceName);</span><br><span class="line">    &#x2F;&#x2F;2.获取被转账用户</span><br><span class="line">    Account targetAccount &#x3D; accountDao.findByName(targetName);</span><br><span class="line">    &#x2F;&#x2F;3.转账操作</span><br><span class="line">    sourceAccount.setMoney(sourceAccount.getMoney()-money);</span><br><span class="line">    targetAccount.setMoney(targetAccount.getMoney()+money);</span><br><span class="line">    &#x2F;&#x2F;4.更新操作</span><br><span class="line">    accountDao.updateAccount(sourceAccount);</span><br><span class="line">    int i &#x3D; 1&#x2F;0;</span><br><span class="line">    accountDao.updateAccount(targetAccount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时的转账方法成功配置好了事务的支持，但如果我们有多个方法需要事务的支持，那么我们也需要对多个方法进行单独配置，这时就没有</p>
<p>配置文件方便，应为配置文件只需要配置好一次便可以了。</p>
<h1 id="相关的配置资源"><a href="#相关的配置资源" class="headerlink" title="相关的配置资源"></a>相关的配置资源</h1><h2 id="1-配置文件的约束"><a href="#1-配置文件的约束" class="headerlink" title="1.配置文件的约束"></a>1.配置文件的约束</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="二、相关的maven的依赖"><a href="#二、相关的maven的依赖" class="headerlink" title="二、相关的maven的依赖"></a>二、相关的maven的依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.0.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.0.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.0.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.annotation&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javax.annotation-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.8.7&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;8.0.19&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>spring的AOP的几种通知类型及配置</title>
    <url>/2020/12/30/spring%E7%9A%84AOP%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%9A%E7%9F%A5%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h4 id="先写前置、后置、异常和最终通知，环绕通知最后单独写"><a href="#先写前置、后置、异常和最终通知，环绕通知最后单独写" class="headerlink" title="先写前置、后置、异常和最终通知，环绕通知最后单独写"></a>先写前置、后置、异常和最终通知，环绕通知最后单独写</h4><h3 id="几种通知类型"><a href="#几种通知类型" class="headerlink" title="几种通知类型"></a>几种通知类型</h3><a id="more"></a>

<p>1.前置通知</p>
<p>2.后置通知</p>
<p>3.异常通知</p>
<p>4.最终通知</p>
<p>5.环绕通知</p>
<h2 id="如图，我想给saveAccount方法进行增强，让一些方法在其执行前后执行"><a href="#如图，我想给saveAccount方法进行增强，让一些方法在其执行前后执行" class="headerlink" title="如图，我想给saveAccount方法进行增强，让一些方法在其执行前后执行"></a>如图，我想给saveAccount方法进行增强，让一些方法在其执行前后执行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package service.impl;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import service.AccountService;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 模拟账户的业务层实现类</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Service(&quot;accountService&quot;)</span><br><span class="line">public class AccountService_impl implements AccountService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void saveAccount() &#123;</span><br><span class="line">        System.out.println(&quot;执行了保存&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="首先准备一个类作为切面类，该类中准备好一些方法"><a href="#首先准备一个类作为切面类，该类中准备好一些方法" class="headerlink" title="首先准备一个类作为切面类，该类中准备好一些方法"></a>首先准备一个类作为切面类，该类中准备好一些方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 用于记录日志的工具类，它里面提供了公共的代码</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Logger &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 前置通知</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void beforePrintLog()&#123;</span><br><span class="line">        System.out.println(&quot;Logger类中的beforePrintLog方法开始记录日志了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 后置通知</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void afterReturningPrintLog()&#123;</span><br><span class="line">        System.out.println(&quot;Logger类中的afterReturningPrintLog方法开始记录日志了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 异常通知</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void afterThrowingPrintLog()&#123;</span><br><span class="line">        System.out.println(&quot;Logger类中的afterThrowingPrintLog方法开始记录日志了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 最终通知</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void afterPrintLog()&#123;</span><br><span class="line">        System.out.println(&quot;Logger类中的afterPrintLog方法开始记录日志了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="然后在配置文件中配置这个切面类"><a href="#然后在配置文件中配置这个切面类" class="headerlink" title="然后在配置文件中配置这个切面类"></a>然后在配置文件中配置这个切面类</h2><p>这里我是将它放在utils包下，类的名称是Logger</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置Logger类--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;logger&quot; class&#x3D;&quot;utils.Logger&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<h2 id="再配置AOP并且建立通知方法和切入点方法的关联"><a href="#再配置AOP并且建立通知方法和切入点方法的关联" class="headerlink" title="再配置AOP并且建立通知方法和切入点方法的关联"></a>再配置AOP并且建立通知方法和切入点方法的关联</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置AOP--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--配置切面--&gt;</span><br><span class="line">    &lt;aop:aspect id&#x3D;&quot;logAdvice&quot; ref&#x3D;&quot;logger&quot;&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>
<p>aop:aspect 标签用于配置切面类，其中id属性为其唯一标识，可以任取；ref属性用于指定属性值为spring容器中的其它bean，这里指定了上文中配置的切面类</p>
<h3 id="配置切入点表达式"><a href="#配置切入点表达式" class="headerlink" title="配置切入点表达式"></a>配置切入点表达式</h3><p>切入点表达式用于指定切入点，也就是被增强的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;aop:pointcut id&#x3D;&quot;pt1&quot; expression&#x3D;&quot;execution(* service.impl.*.*(..))&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>1.切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容</p>
<p>2.此标签写在aop:aspect标签内部只当前切面使用</p>
<p>3.他还可写在aop:aspect标签外部，此时就变成了所有切面可用。但必须写在aop:aspect标签之上</p>
<h2 id="开始配置通知"><a href="#开始配置通知" class="headerlink" title="开始配置通知"></a>开始配置通知</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置前置通知，在切入点方法执行之前执行--&gt;</span><br><span class="line">&lt;aop:before method&#x3D;&quot;beforePrintLog&quot; pointcut-ref&#x3D;&quot;pt1&quot;&gt;&lt;&#x2F;aop:before&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--配置后置通知，在切入点方法正常执行之后执行。它和异常通知永远只能执行一个--&gt;</span><br><span class="line">&lt;aop:after-returning method&#x3D;&quot;afterReturningPrintLog&quot; pointcut-ref&#x3D;&quot;pt1&quot;&gt;&lt;&#x2F;aop:after-returning&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--配置异常通知，在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个--&gt;</span><br><span class="line">&lt;aop:after-throwing method&#x3D;&quot;afterThrowingPrintLog&quot; pointcut-ref&#x3D;&quot;pt1&quot;&gt;&lt;&#x2F;aop:after-throwing&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--配置最终通知，无论切入点方法是否正常执行他都会在其后面执行--&gt;</span><br><span class="line">&lt;aop:after method&#x3D;&quot;afterPrintLog&quot; pointcut-ref&#x3D;&quot;pt1&quot;&gt;&lt;&#x2F;aop:after&gt;</span><br></pre></td></tr></table></figure>
<p>method属性为切面类中的方法名</p>
<p>pointcut-ref属性为指定切入点表达式</p>
<p>注意：通知应在aop:aspect 标签内部配置</p>
<h2 id="在测试类中运行的结果"><a href="#在测试类中运行的结果" class="headerlink" title="在测试类中运行的结果"></a>在测试类中运行的结果</h2><p><img src="/image/spring%E7%9A%84AOP%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%9A%E7%9F%A5%E7%B1%BB%E5%9E%8B/1.png"></p>
<h3 id="可见通知配置成功，saveAccount方法增强成功"><a href="#可见通知配置成功，saveAccount方法增强成功" class="headerlink" title="可见通知配置成功，saveAccount方法增强成功"></a>可见通知配置成功，saveAccount方法增强成功</h3><h1 id="环绕通知的使用"><a href="#环绕通知的使用" class="headerlink" title="环绕通知的使用"></a>环绕通知的使用</h1><h3 id="环绕通知的概念：它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。"><a href="#环绕通知的概念：它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。" class="headerlink" title="环绕通知的概念：它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。"></a>环绕通知的概念：它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。</h3><h2 id="错误案例"><a href="#错误案例" class="headerlink" title="错误案例"></a>错误案例</h2><p>依照之前的写法，我先依葫芦画瓢的这样写环绕通知的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void arroundPrintLog()&#123;</span><br><span class="line">    System.out.println(&quot;Logger类中的arroundPrintLog方法开始记录日志了&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在配置文件中配置环绕通知，为了避免影响，先把上文配置的通知注释掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置环绕通知--&gt;</span><br><span class="line">&lt;aop:around method&#x3D;&quot;arroundPrintLog&quot; pointcut-ref&#x3D;&quot;pt1&quot;&gt;&lt;&#x2F;aop:around&gt;</span><br></pre></td></tr></table></figure>
<p>在测试类中运行</p>
<p><img src="/image/spring%E7%9A%84AOP%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%9A%E7%9F%A5%E7%B1%BB%E5%9E%8B/2.png"></p>
<p>结果发现只执行了通知方法，切入点方法并未执行</p>
<h3 id="错误解析"><a href="#错误解析" class="headerlink" title="错误解析"></a>错误解析</h3><p>1.通过对比动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用。而我们的代码中没有</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>Spring框架为我们提供了一个接口：ProceedingJoinPoint。该接口有一个方法proceed(),此方法就相当于明确切入点方法<br>该接口可以作为环绕通知的方法参数，在程序执行是，spring框架会为我们提供该接口的实现类供我们使用</p>
<h2 id="正确写法"><a href="#正确写法" class="headerlink" title="正确写法"></a>正确写法</h2><h4 id="1-首先在之前的切面类中准备正确的环绕通知方法"><a href="#1-首先在之前的切面类中准备正确的环绕通知方法" class="headerlink" title="1.首先在之前的切面类中准备正确的环绕通知方法"></a>1.首先在之前的切面类中准备正确的环绕通知方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object arroundPrintLog(ProceedingJoinPoint pj)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-调用proceed（）方法来明确切入点方法"><a href="#2-调用proceed（）方法来明确切入点方法" class="headerlink" title="2.调用proceed（）方法来明确切入点方法"></a>2.调用proceed（）方法来明确切入点方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object arroundPrintLog(ProceedingJoinPoint pj)&#123;</span><br><span class="line">    Object rtValue &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        Object[] args &#x3D; pj.getArgs();   &#x2F;&#x2F;得到方法执行所需的参数</span><br><span class="line">        rtValue &#x3D; pj.proceed(args);     &#x2F;&#x2F;明确调用业务层方法(切入点方法)</span><br><span class="line">        return rtValue;</span><br><span class="line">    &#125;catch (Throwable t)&#123;</span><br><span class="line">        throw new RuntimeException(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意事项：</p>
<p>1.此处有异常，该异常只能用Throwable才能捕获</p>
<p>2.pj.getArgs()方法是获取切入点方法的参数</p>
<p>3.该过程与动态代理过程类似</p>
<h4 id="3-在明确的切入点方法前后插入通知"><a href="#3-在明确的切入点方法前后插入通知" class="headerlink" title="3.在明确的切入点方法前后插入通知"></a>3.在明确的切入点方法前后插入通知</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object arroundPrintLog(ProceedingJoinPoint pj)&#123;</span><br><span class="line">    Object rtValue &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        Object[] args &#x3D; pj.getArgs();   &#x2F;&#x2F;得到方法执行所需的参数</span><br><span class="line">        System.out.println(&quot;Logger类中的arroundPrintLog方法开始记录日志了...前置&quot;);</span><br><span class="line">        rtValue &#x3D; pj.proceed(args);     &#x2F;&#x2F;明确调用业务层方法(切入点方法)</span><br><span class="line">        System.out.println(&quot;Logger类中的arroundPrintLog方法开始记录日志了...后置&quot;);</span><br><span class="line">        return rtValue;</span><br><span class="line">    &#125;catch (Throwable t)&#123;</span><br><span class="line">        System.out.println(&quot;Logger类中的arroundPrintLog方法开始记录日志了...异常&quot;);</span><br><span class="line">        throw new RuntimeException(t);</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        System.out.println(&quot;Logger类中的arroundPrintLog方法开始记录日志了...最终&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<h5 id="在切入点方法前执行的就是前置通知，"><a href="#在切入点方法前执行的就是前置通知，" class="headerlink" title="在切入点方法前执行的就是前置通知，"></a>在切入点方法前执行的就是前置通知，</h5><h5 id="在切入点方法后执行的就是前置通知，"><a href="#在切入点方法后执行的就是前置通知，" class="headerlink" title="在切入点方法后执行的就是前置通知，"></a>在切入点方法后执行的就是前置通知，</h5><h5 id="catch里执行的就是异常通知，"><a href="#catch里执行的就是异常通知，" class="headerlink" title="catch里执行的就是异常通知，"></a>catch里执行的就是异常通知，</h5><h5 id="finally里执行的就是最终通知"><a href="#finally里执行的就是最终通知" class="headerlink" title="finally里执行的就是最终通知"></a>finally里执行的就是最终通知</h5><h4 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4.运行结果"></a>4.运行结果</h4><p><img src="/image/spring%E7%9A%84AOP%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%9A%E7%9F%A5%E7%B1%BB%E5%9E%8B/3.png"></p>
<h4 id="环绕通知配置成功"><a href="#环绕通知配置成功" class="headerlink" title="环绕通知配置成功"></a>环绕通知配置成功</h4><p>可见环绕通知的好处，它简化了书写步骤，并且让我们可以在代码中手动控制增强方法何时执行的方式。</p>
]]></content>
  </entry>
</search>
